{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Game.js\",\n  _s3 = $RefreshSig$();\nimport { useParams } from 'react-router-dom';\nimport './App.css';\nimport data from './data.json';\nimport { ListItemButton, Box, Button, TextField, Typography, Alert, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio } from '@mui/material';\nimport React, { useState, useEffect, useRef } from 'react';\nimport NavBar from './NavBar';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s3();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  const {\n    chapterNumber\n  } = useParams();\n  const [selectedButton, setSelectedButton] = useState(null);\n  const [correctIndex, setCorrectIndex] = useState(null);\n  const [vocabWords, setVocabWords] = useState([]);\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n  const [correct, setCorrect] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [score, setScore] = useState(0);\n  const [answeredWords, setAnsweredWords] = useState([]);\n  const [isFirstAttempt, setIsFirstAttempt] = useState(true);\n  const [refreshChoices, setRefreshChoices] = useState(true);\n  const [displayAudioError, setDisplayAudioError] = useState(false);\n  const [isNewWord, setIsNewWord] = useState(0);\n  const [answerType, setAnswerType] = useState('mc');\n  const [textAnswer, setTextAnswer] = useState();\n  const [showOverrideText, setShowOverrideText] = useState(false);\n  const usePrevious = (value, initialValue) => {\n    _s();\n    const ref = useRef(initialValue);\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  };\n  _s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n  const useEffectDebugger = (effectHook, dependencies, dependencyNames = []) => {\n    _s2();\n    const previousDeps = usePrevious(dependencies, []);\n    const changedDeps = dependencies.reduce((accum, dependency, index) => {\n      if (dependency !== previousDeps[index]) {\n        const keyName = dependencyNames[index] || index;\n        return {\n          ...accum,\n          [keyName]: {\n            before: previousDeps[index],\n            after: dependency\n          }\n        };\n      }\n      return accum;\n    }, {});\n    if (Object.keys(changedDeps).length) {\n      console.log('[use-effect-debugger] ', changedDeps);\n    }\n    useEffect(effectHook, dependencies);\n  };\n  _s2(useEffectDebugger, \"1AqIw6hU5rLnso5uh3gWVbL9Ay4=\", false, function () {\n    return [usePrevious];\n  });\n  useEffect(() => {\n    const allData = [];\n    for (const vocabType in data.chapters[chapterNumber]) {\n      allData.push(...data.chapters[chapterNumber][vocabType]);\n    }\n    setVocabWords([...allData]);\n  }, []);\n  useEffect(() => {\n    getQandA();\n  }, [vocabWords]);\n  useEffect(() => {\n    if (vocabWords.length > 0 && shuffledAnswers.length > 0 && correct) {\n      setIsLoading(false);\n    }\n  }, [vocabWords, shuffledAnswers, correct]);\n  useEffect(() => {\n    if (isNewWord) playButtonClicked();\n  }, [isNewWord]);\n  const shuffleArray = array => {\n    // Fisher-Yates Shuffle\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n  const answerButtonClicked = async (choice, key) => {\n    if (selectedButton) {\n      return;\n    }\n    setSelectedButton(key);\n    setIsNewWord(0);\n    if (choice === correct) {\n      const audio = new Audio('/audios/correct.wav');\n      await audio.play();\n      setScore(score + 1);\n      if (isFirstAttempt) {\n        setAnsweredWords([...answeredWords, correct]);\n      }\n    } else {\n      const audio = new Audio('/audios/wrong.wav');\n      await audio.play();\n      setScore(0);\n      setIsFirstAttempt(false);\n    }\n    setRefreshChoices(!refreshChoices);\n  };\n  const playButtonClicked = async () => {\n    if (correct) {\n      try {\n        const audio = new Audio(correct.audioPath);\n        await audio.play();\n        setDisplayAudioError(false);\n      } catch (error) {\n        setDisplayAudioError(true);\n      }\n    }\n  };\n  async function playAudioAndWait(audioPath) {\n    return new Promise(resolve => {\n      const audio = new Audio(audioPath);\n      audio.addEventListener('ended', () => {\n        // This event will be fired when the audio playback is complete.\n        resolve();\n      });\n      audio.play();\n    });\n  }\n  const getQandA = async () => {\n    setIsLoading(true);\n    setSelectedButton(null);\n    setIsFirstAttempt(true);\n    setTextAnswer('');\n    setShowOverrideText(false);\n    if (vocabWords.length === 0) {\n      return;\n    }\n    var remainingWords = vocabWords.filter(word => !answeredWords.includes(word));\n    if (remainingWords.length === 0) {\n      alert('You learned all the words');\n      await playAudioAndWait('/audios/finishedAllWords.wav');\n      setAnsweredWords([]);\n      remainingWords = [...vocabWords];\n      setScore(0);\n    }\n    shuffleArray(remainingWords);\n\n    // Select the first word as the correct answer\n    const newCorrect = remainingWords[0];\n    var newWrongAnswers = [];\n\n    // Randomly select 3 other words as wrong answers\n    if (remainingWords.length < 4) {\n      shuffleArray(vocabWords);\n      const someVocab = vocabWords.slice(0, 3);\n      const hasCorrect = someVocab.findIndex(word => newCorrect.english === word.english);\n      if (hasCorrect !== -1) {\n        someVocab[hasCorrect] = vocabWords[4];\n      }\n      newWrongAnswers = [...someVocab];\n    } else {\n      newWrongAnswers = remainingWords.slice(1, 4);\n    }\n\n    // Combine the correct and wrong answers into a single array\n    const newShuffledAnswers = [newCorrect, ...newWrongAnswers];\n    shuffleArray(newShuffledAnswers);\n    setCorrectIndex(newShuffledAnswers.findIndex(answer => answer.english === newCorrect.english));\n    setShuffledAnswers(newShuffledAnswers);\n    setCorrect(newCorrect);\n    setIsNewWord(isNewWord + 1);\n  };\n  const textSubmit = async () => {\n    setIsFirstAttempt(false);\n    console.log(textAnswer);\n    console.log(correct.english);\n    if (textAnswer === correct.english) {\n      const audio = new Audio('/audios/correct.wav');\n      await audio.play();\n      setScore(score + 1);\n      if (isFirstAttempt) {\n        setAnsweredWords([...answeredWords, correct]);\n      }\n    } else {\n      setShowOverrideText(true);\n      const audio = new Audio('/audios/wrong.wav');\n      await audio.play();\n      setScore(score - 1);\n    }\n  };\n  const overrideText = async () => {\n    const audio = new Audio('/audios/correct.wav');\n    await audio.play();\n    setScore(score + 2);\n    setAnsweredWords([...answeredWords, correct]);\n    setShowOverrideText(false);\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      // Change 'Enter' to the desired key\n      textSubmit();\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"loading...\"\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      id: \"columns\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this), displayAudioError && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"info\",\n        children: \"Hit 'Play' to play the audio (The browser doesn't let you play audio without interaction)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"rows\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rowItem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"columns\",\n          className: \"rowItem\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            id: \"vocab-game-title\",\n            variant: \"h4\",\n            children: \"Vocab Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            id: \"remaining-score\",\n            variant: \"h5\",\n            children: [\"Remaining: \", answeredWords.length, \"/\", vocabWords.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            id: \"correct-hebrew\",\n            variant: \"h5\",\n            children: correct.hebrew\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this), !isFirstAttempt && /*#__PURE__*/_jsxDEV(Typography, {\n            id: \"correct-english\",\n            variant: \"h5\",\n            children: correct.english\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          className: \"rowItem\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            children: \"Answer Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            defaultValue: \"mc\",\n            name: \"radio-buttons-group\",\n            id: \"radio\",\n            value: answerType,\n            onChange: e => setAnswerType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"mc\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 67\n              }, this),\n              label: \"Multiple Choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"text\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 69\n              }, this),\n              label: \"Text Input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        id: \"container\",\n        children: [answerType === 'mc' && shuffledAnswers.map((choice, index) => /*#__PURE__*/_jsxDEV(ListItemButton, {\n          id: \"vocab-card\",\n          onClick: () => answerButtonClicked(choice, index),\n          style: {\n            backgroundColor: selectedButton != null ? correctIndex === index ? 'lightgreen' : selectedButton === index && selectedButton !== correctIndex ? 'red' : 'whitesmoke' : 'whitesmoke',\n            cursor: selectedButton ? 'not-allowed' : 'pointer'\n          },\n          disabled: selectedButton != null,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: choice.english\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }, this)), answerType === 'text' && /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"text-answer-container\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            disabled: !isFirstAttempt,\n            label: \"Answer\",\n            required: true,\n            value: textAnswer,\n            onChange: e => setTextAnswer(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: !isFirstAttempt,\n            variant: \"contained\",\n            onClick: textSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: !showOverrideText,\n            variant: \"contained\",\n            onClick: overrideText,\n            children: \"override text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        id: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          id: \"audioGameButton\",\n          variant: \"contained\",\n          onClick: playButtonClicked,\n          children: \"Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"nextWordGameButton\",\n          variant: \"contained\",\n          onClick: getQandA,\n          children: \"Next word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        id: \"score\",\n        variant: \"h5\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this);\n  }\n}\n_s3(Game, \"5skWbTS0TTi2FRpKyxom3+I3rYM=\", false, function () {\n  return [useParams];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useParams","data","ListItemButton","Box","Button","TextField","Typography","Alert","FormControl","FormLabel","RadioGroup","FormControlLabel","Radio","React","useState","useEffect","useRef","NavBar","Fragment","_Fragment","jsxDEV","_jsxDEV","Game","_s3","_s","$RefreshSig$","_s2","chapterNumber","selectedButton","setSelectedButton","correctIndex","setCorrectIndex","vocabWords","setVocabWords","shuffledAnswers","setShuffledAnswers","correct","setCorrect","isLoading","setIsLoading","score","setScore","answeredWords","setAnsweredWords","isFirstAttempt","setIsFirstAttempt","refreshChoices","setRefreshChoices","displayAudioError","setDisplayAudioError","isNewWord","setIsNewWord","answerType","setAnswerType","textAnswer","setTextAnswer","showOverrideText","setShowOverrideText","usePrevious","value","initialValue","ref","current","useEffectDebugger","effectHook","dependencies","dependencyNames","previousDeps","changedDeps","reduce","accum","dependency","index","keyName","before","after","Object","keys","length","console","log","allData","vocabType","chapters","push","getQandA","playButtonClicked","shuffleArray","array","i","j","Math","floor","random","answerButtonClicked","choice","key","audio","Audio","play","audioPath","error","playAudioAndWait","Promise","resolve","addEventListener","remainingWords","filter","word","includes","alert","newCorrect","newWrongAnswers","someVocab","slice","hasCorrect","findIndex","english","newShuffledAnswers","answer","textSubmit","overrideText","handleKeyPress","event","children","id","fileName","_jsxFileName","lineNumber","columnNumber","severity","className","variant","hebrew","defaultValue","name","onChange","e","target","control","label","map","onClick","style","backgroundColor","cursor","disabled","required","_c","$RefreshReg$"],"sources":["/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Game.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport './App.css';\nimport data from './data.json';\nimport { ListItemButton, Box, Button, TextField, Typography, Alert,FormControl, FormLabel, RadioGroup, FormControlLabel, Radio } from '@mui/material';\nimport React, { useState, useEffect, useRef } from 'react';\nimport NavBar from './NavBar';\n\nfunction Game() {\n    const { chapterNumber } = useParams();\n    const [selectedButton, setSelectedButton] = useState(null);\n    const [correctIndex, setCorrectIndex] = useState(null);\n    const [vocabWords, setVocabWords] = useState([]);\n    const [shuffledAnswers, setShuffledAnswers] = useState([]);\n    const [correct, setCorrect] = useState();\n    const [isLoading, setIsLoading] = useState(true);\n    const [score, setScore] = useState(0);\n    const [answeredWords, setAnsweredWords] = useState([]);\n    const [isFirstAttempt, setIsFirstAttempt] = useState(true);\n    const [refreshChoices, setRefreshChoices] = useState(true)\n    const [displayAudioError, setDisplayAudioError] = useState(false)\n    const [isNewWord, setIsNewWord] = useState(0);\n    const [answerType, setAnswerType] = useState('mc');\n    const [textAnswer, setTextAnswer] = useState();\n    const [showOverrideText, setShowOverrideText] = useState(false)\n\n\n    const usePrevious = (value, initialValue) => {\n        const ref = useRef(initialValue);\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    };\n\n    const useEffectDebugger = (effectHook, dependencies, dependencyNames = []) => {\n        const previousDeps = usePrevious(dependencies, []);\n\n        const changedDeps = dependencies.reduce((accum, dependency, index) => {\n            if (dependency !== previousDeps[index]) {\n                const keyName = dependencyNames[index] || index;\n                return {\n                    ...accum,\n                    [keyName]: {\n                        before: previousDeps[index],\n                        after: dependency\n                    }\n                };\n            }\n\n            return accum;\n        }, {});\n\n        if (Object.keys(changedDeps).length) {\n            console.log('[use-effect-debugger] ', changedDeps);\n        }\n\n        useEffect(effectHook, dependencies);\n    };\n\n    useEffect(() => {\n        const allData = [];\n\n        for (const vocabType in data.chapters[chapterNumber]) {\n            allData.push(...data.chapters[chapterNumber][vocabType]);\n        }\n\n        setVocabWords([...allData]);\n\n    }, []);\n\n    useEffect(() => {\n        getQandA()\n\n    }, [vocabWords])\n\n    useEffect(() => {\n        if (vocabWords.length > 0 && shuffledAnswers.length > 0 && correct) {\n            setIsLoading(false);\n        }\n    }, [vocabWords, shuffledAnswers, correct]);\n\n    useEffect(() => {\n        if (isNewWord)\n            playButtonClicked();\n\n    }, [isNewWord])\n\n\n\n\n    const shuffleArray = (array) => {\n        // Fisher-Yates Shuffle\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    };\n\n    const answerButtonClicked = async (choice, key) => {\n        if (selectedButton) {\n            return;\n        }\n\n        setSelectedButton(key)\n        setIsNewWord(0);\n\n        if (choice === correct) {\n            const audio = new Audio('/audios/correct.wav')\n            await audio.play()\n            setScore(score + 1)\n\n            if (isFirstAttempt) {\n                setAnsweredWords([...answeredWords, correct])\n            }\n        } else {\n            const audio = new Audio('/audios/wrong.wav')\n            await audio.play()\n            setScore(0);\n            setIsFirstAttempt(false);\n        }\n\n        setRefreshChoices(!refreshChoices)\n    };\n\n    const playButtonClicked = async () => {\n        if (correct) {\n            try {\n                const audio = new Audio(correct.audioPath);\n                await audio.play()\n                setDisplayAudioError(false);\n            }\n            catch (error) {\n                setDisplayAudioError(true)\n            }\n        }\n    };\n\n    async function playAudioAndWait(audioPath) {\n        return new Promise((resolve) => {\n            const audio = new Audio(audioPath);\n\n            audio.addEventListener('ended', () => {\n                // This event will be fired when the audio playback is complete.\n                resolve();\n            });\n\n            audio.play();\n        });\n    }\n\n    const getQandA = async () => {\n        setIsLoading(true)\n        setSelectedButton(null)\n        setIsFirstAttempt(true)\n        setTextAnswer('');\n        setShowOverrideText(false)\n\n        if (vocabWords.length === 0) {\n            return;\n        }\n\n        var remainingWords = vocabWords.filter((word) => !answeredWords.includes(word));\n\n        if (remainingWords.length === 0) {\n            alert('You learned all the words')\n            await playAudioAndWait('/audios/finishedAllWords.wav')\n            setAnsweredWords([]);\n            remainingWords = [...vocabWords]\n            setScore(0)\n        }\n\n\n        shuffleArray(remainingWords);\n\n        // Select the first word as the correct answer\n        const newCorrect = remainingWords[0];\n        var newWrongAnswers = [];\n\n        // Randomly select 3 other words as wrong answers\n        if (remainingWords.length < 4) {\n            shuffleArray(vocabWords);\n            const someVocab = vocabWords.slice(0, 3);\n            const hasCorrect = someVocab.findIndex((word) => newCorrect.english === word.english);\n            if (hasCorrect !== -1) {\n                someVocab[hasCorrect] = vocabWords[4];\n\n            }\n\n            newWrongAnswers = [...someVocab];\n        }\n        else {\n            newWrongAnswers = remainingWords.slice(1, 4);\n        }\n\n        // Combine the correct and wrong answers into a single array\n        const newShuffledAnswers = [newCorrect, ...newWrongAnswers];\n        shuffleArray(newShuffledAnswers)\n        setCorrectIndex(newShuffledAnswers.findIndex((answer) => answer.english === newCorrect.english))\n        setShuffledAnswers(newShuffledAnswers);\n        setCorrect(newCorrect);\n        setIsNewWord(isNewWord + 1);\n    \n    }\n\n    const textSubmit = async () => {\n        setIsFirstAttempt(false);\n\n        console.log(textAnswer)\n        console.log(correct.english)\n\n        if (textAnswer === correct.english) {\n            const audio = new Audio('/audios/correct.wav')\n            await audio.play()\n            setScore(score + 1)\n\n            if (isFirstAttempt) {\n                setAnsweredWords([...answeredWords, correct])\n            }\n        } else {\n            setShowOverrideText(true);\n            const audio = new Audio('/audios/wrong.wav')\n            await audio.play()\n            setScore(score - 1);\n        }\n    }\n\n    const overrideText = async () => {\n        const audio = new Audio('/audios/correct.wav')\n        await audio.play()\n        setScore(score + 2)\n        setAnsweredWords([...answeredWords, correct])\n        setShowOverrideText(false);\n    }\n    \n\n    const handleKeyPress = (event) => {\n        if (event.key === 'Enter') { // Change 'Enter' to the desired key\n            textSubmit();\n        }\n      };\n\n    if (isLoading) {\n\n        return (\n            <>loading...</>\n        )\n    }\n    else {\n        return (\n\n            <Box id=\"columns\">\n                <NavBar />\n                {displayAudioError && <Alert severity='info'>Hit 'Play' to play the audio (The browser doesn't let you play audio without interaction)</Alert>}\n                <div id='rows'>\n                    <div className='rowItem'></div>\n                    <div id='columns' className='rowItem'>\n                        <Typography id='vocab-game-title' variant='h4'>Vocab Game</Typography>\n                        <Typography id='remaining-score' variant='h5'>Remaining: {answeredWords.length}/{vocabWords.length}</Typography>\n                        <Typography id='correct-hebrew' variant='h5'>{correct.hebrew}</Typography>\n                        {!isFirstAttempt && <Typography id='correct-english' variant='h5'>{correct.english}</Typography>}\n                    </div>\n                    <FormControl className='rowItem'>\n                        <FormLabel>Answer Type</FormLabel>\n                        <RadioGroup\n                            defaultValue=\"mc\"\n                            name=\"radio-buttons-group\"\n                            id='radio'\n                            value={answerType} onChange={e => setAnswerType(e.target.value)}\n                        >\n                            <FormControlLabel value=\"mc\" control={<Radio />} label=\"Multiple Choice\" />\n                            <FormControlLabel value=\"text\" control={<Radio />} label=\"Text Input\" />\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n                <Box id='container'>\n                    {answerType === 'mc' && shuffledAnswers.map((choice, index) => (\n                        <ListItemButton\n                            id='vocab-card'\n                            key={index}\n                            onClick={() => answerButtonClicked(choice, index)}\n                            style={{\n                                backgroundColor: selectedButton != null ? correctIndex === index ? 'lightgreen' : (selectedButton === index && selectedButton !== correctIndex) ? 'red' : 'whitesmoke' : 'whitesmoke',\n                                cursor: selectedButton ? 'not-allowed' : 'pointer'\n                            }}\n                            disabled={selectedButton != null}\n                        >\n                            <Typography>{choice.english}</Typography>\n                        </ListItemButton>\n                    ))}\n                    {answerType === 'text' &&\n                    (<div id='text-answer-container'>\n                        <TextField disabled={!isFirstAttempt} label=\"Answer\" required value={textAnswer} onChange={e => setTextAnswer(e.target.value)} />\n                        <Button disabled={!isFirstAttempt} variant='contained' onClick={textSubmit}>Submit</Button>\n                        <Button disabled={!showOverrideText} variant='contained' onClick={overrideText}>override text</Button>\n                    </div>)\n                    }\n                </Box>\n                <Box id='button-container'>\n                    <Button\n                        id='audioGameButton'\n                        variant='contained'\n                        onClick={playButtonClicked}\n                    >\n                        Play\n                    </Button>\n                    <Button\n                        id='nextWordGameButton'\n                        variant='contained'\n                        onClick={getQandA}\n                    >\n                        Next word\n                    </Button>\n                </Box>\n                <Typography id='score' variant='h5'>Score: {score}</Typography>\n            </Box>\n        );\n    }\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}