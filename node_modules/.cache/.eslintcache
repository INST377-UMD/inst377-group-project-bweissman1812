[{"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/index.js":"1","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/App.js":"2","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/reportWebVitals.js":"3","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Conjugate.js":"4","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Vocab.js":"5","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/News.js":"6","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/About.js":"7","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Chapters.js":"8","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Help.js":"9","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Game.js":"10","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/NavBar.js":"11"},{"size":536,"mtime":1701319455293,"results":"12","hashOfConfig":"13"},{"size":886,"mtime":1701743441390,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1695999956370,"results":"15","hashOfConfig":"13"},{"size":5514,"mtime":1701319455292,"results":"16","hashOfConfig":"13"},{"size":1581,"mtime":1698944707679,"results":"17","hashOfConfig":"13"},{"size":1398,"mtime":1701319455293,"results":"18","hashOfConfig":"13"},{"size":1287,"mtime":1701890835421,"results":"19","hashOfConfig":"13"},{"size":2334,"mtime":1701743441390,"results":"20","hashOfConfig":"13"},{"size":621,"mtime":1698944707676,"results":"21","hashOfConfig":"13"},{"size":11138,"mtime":1698944707674,"results":"22","hashOfConfig":"13"},{"size":457,"mtime":1698944707678,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11v05cd",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/index.js",[],[],"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/App.js",[],[],"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/reportWebVitals.js",[],[],["59"],"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Conjugate.js",["60"],[],"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Vocab.js",[],[],"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/News.js",[],[],"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/About.js",[],[],"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Chapters.js",[],[],"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Help.js",[],[],"/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/Game.js",["61","62","63","64","65","66"],[],"import { useParams } from 'react-router-dom';\nimport './App.css';\nimport data from './data.json';\nimport { ListItemButton, Box, Button, TextField, Typography, Alert,FormControl, FormLabel, RadioGroup, FormControlLabel, Radio } from '@mui/material';\nimport React, { useState, useEffect, useRef } from 'react';\nimport NavBar from './NavBar';\n\nfunction Game() {\n    const { chapterNumber } = useParams();\n    const [selectedButton, setSelectedButton] = useState(null);\n    const [correctIndex, setCorrectIndex] = useState(null);\n    const [vocabWords, setVocabWords] = useState([]);\n    const [shuffledAnswers, setShuffledAnswers] = useState([]);\n    const [correct, setCorrect] = useState();\n    const [isLoading, setIsLoading] = useState(true);\n    const [score, setScore] = useState(0);\n    const [answeredWords, setAnsweredWords] = useState([]);\n    const [isFirstAttempt, setIsFirstAttempt] = useState(true);\n    const [refreshChoices, setRefreshChoices] = useState(true)\n    const [displayAudioError, setDisplayAudioError] = useState(false)\n    const [isNewWord, setIsNewWord] = useState(0);\n    const [answerType, setAnswerType] = useState('mc');\n    const [textAnswer, setTextAnswer] = useState();\n    const [showOverrideText, setShowOverrideText] = useState(false)\n\n\n    const usePrevious = (value, initialValue) => {\n        const ref = useRef(initialValue);\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    };\n\n    const useEffectDebugger = (effectHook, dependencies, dependencyNames = []) => {\n        const previousDeps = usePrevious(dependencies, []);\n\n        const changedDeps = dependencies.reduce((accum, dependency, index) => {\n            if (dependency !== previousDeps[index]) {\n                const keyName = dependencyNames[index] || index;\n                return {\n                    ...accum,\n                    [keyName]: {\n                        before: previousDeps[index],\n                        after: dependency\n                    }\n                };\n            }\n\n            return accum;\n        }, {});\n\n        if (Object.keys(changedDeps).length) {\n            console.log('[use-effect-debugger] ', changedDeps);\n        }\n\n        useEffect(effectHook, dependencies);\n    };\n\n    useEffect(() => {\n        const allData = [];\n\n        for (const vocabType in data.chapters[chapterNumber]) {\n            allData.push(...data.chapters[chapterNumber][vocabType]);\n        }\n\n        setVocabWords([...allData]);\n\n    }, []);\n\n    useEffect(() => {\n        getQandA()\n\n    }, [vocabWords])\n\n    useEffect(() => {\n        if (vocabWords.length > 0 && shuffledAnswers.length > 0 && correct) {\n            setIsLoading(false);\n        }\n    }, [vocabWords, shuffledAnswers, correct]);\n\n    useEffect(() => {\n        if (isNewWord)\n            playButtonClicked();\n\n    }, [isNewWord])\n\n\n\n\n    const shuffleArray = (array) => {\n        // Fisher-Yates Shuffle\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    };\n\n    const answerButtonClicked = async (choice, key) => {\n        if (selectedButton) {\n            return;\n        }\n\n        setSelectedButton(key)\n        setIsNewWord(0);\n\n        if (choice === correct) {\n            const audio = new Audio('/audios/correct.wav')\n            await audio.play()\n            setScore(score + 1)\n\n            if (isFirstAttempt) {\n                setAnsweredWords([...answeredWords, correct])\n            }\n        } else {\n            const audio = new Audio('/audios/wrong.wav')\n            await audio.play()\n            setScore(0);\n            setIsFirstAttempt(false);\n        }\n\n        setRefreshChoices(!refreshChoices)\n    };\n\n    const playButtonClicked = async () => {\n        if (correct) {\n            try {\n                const audio = new Audio(correct.audioPath);\n                await audio.play()\n                setDisplayAudioError(false);\n            }\n            catch (error) {\n                setDisplayAudioError(true)\n            }\n        }\n    };\n\n    async function playAudioAndWait(audioPath) {\n        return new Promise((resolve) => {\n            const audio = new Audio(audioPath);\n\n            audio.addEventListener('ended', () => {\n                // This event will be fired when the audio playback is complete.\n                resolve();\n            });\n\n            audio.play();\n        });\n    }\n\n    const getQandA = async () => {\n        setIsLoading(true)\n        setSelectedButton(null)\n        setIsFirstAttempt(true)\n        setTextAnswer('');\n        setShowOverrideText(false)\n\n        if (vocabWords.length === 0) {\n            return;\n        }\n\n        var remainingWords = vocabWords.filter((word) => !answeredWords.includes(word));\n\n        if (remainingWords.length === 0) {\n            alert('You learned all the words')\n            await playAudioAndWait('/audios/finishedAllWords.wav')\n            setAnsweredWords([]);\n            remainingWords = [...vocabWords]\n            setScore(0)\n        }\n\n\n        shuffleArray(remainingWords);\n\n        // Select the first word as the correct answer\n        const newCorrect = remainingWords[0];\n        var newWrongAnswers = [];\n\n        // Randomly select 3 other words as wrong answers\n        if (remainingWords.length < 4) {\n            shuffleArray(vocabWords);\n            const someVocab = vocabWords.slice(0, 3);\n            const hasCorrect = someVocab.findIndex((word) => newCorrect.english === word.english);\n            if (hasCorrect !== -1) {\n                someVocab[hasCorrect] = vocabWords[4];\n\n            }\n\n            newWrongAnswers = [...someVocab];\n        }\n        else {\n            newWrongAnswers = remainingWords.slice(1, 4);\n        }\n\n        // Combine the correct and wrong answers into a single array\n        const newShuffledAnswers = [newCorrect, ...newWrongAnswers];\n        shuffleArray(newShuffledAnswers)\n        setCorrectIndex(newShuffledAnswers.findIndex((answer) => answer.english === newCorrect.english))\n        setShuffledAnswers(newShuffledAnswers);\n        setCorrect(newCorrect);\n        setIsNewWord(isNewWord + 1);\n    \n    }\n\n    const textSubmit = async () => {\n        setIsFirstAttempt(false);\n\n        console.log(textAnswer)\n        console.log(correct.english)\n\n        if (textAnswer === correct.english) {\n            const audio = new Audio('/audios/correct.wav')\n            await audio.play()\n            setScore(score + 1)\n\n            if (isFirstAttempt) {\n                setAnsweredWords([...answeredWords, correct])\n            }\n        } else {\n            setShowOverrideText(true);\n            const audio = new Audio('/audios/wrong.wav')\n            await audio.play()\n            setScore(score - 1);\n        }\n    }\n\n    const overrideText = async () => {\n        const audio = new Audio('/audios/correct.wav')\n        await audio.play()\n        setScore(score + 2)\n        setAnsweredWords([...answeredWords, correct])\n        setShowOverrideText(false);\n    }\n    \n\n    const handleKeyPress = (event) => {\n        if (event.key === 'Enter') { // Change 'Enter' to the desired key\n            textSubmit();\n        }\n      };\n\n    if (isLoading) {\n\n        return (\n            <>loading...</>\n        )\n    }\n    else {\n        return (\n\n            <Box id=\"columns\">\n                <NavBar />\n                {displayAudioError && <Alert severity='info'>Hit 'Play' to play the audio (The browser doesn't let you play audio without interaction)</Alert>}\n                <div id='rows'>\n                    <div className='rowItem'></div>\n                    <div id='columns' className='rowItem'>\n                        <Typography id='vocab-game-title' variant='h4'>Vocab Game</Typography>\n                        <Typography id='remaining-score' variant='h5'>Remaining: {answeredWords.length}/{vocabWords.length}</Typography>\n                        <Typography id='correct-hebrew' variant='h5'>{correct.hebrew}</Typography>\n                        {!isFirstAttempt && <Typography id='correct-english' variant='h5'>{correct.english}</Typography>}\n                    </div>\n                    <FormControl className='rowItem'>\n                        <FormLabel>Answer Type</FormLabel>\n                        <RadioGroup\n                            defaultValue=\"mc\"\n                            name=\"radio-buttons-group\"\n                            id='radio'\n                            value={answerType} onChange={e => setAnswerType(e.target.value)}\n                        >\n                            <FormControlLabel value=\"mc\" control={<Radio />} label=\"Multiple Choice\" />\n                            <FormControlLabel value=\"text\" control={<Radio />} label=\"Text Input\" />\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n                <Box id='container'>\n                    {answerType === 'mc' && shuffledAnswers.map((choice, index) => (\n                        <ListItemButton\n                            id='vocab-card'\n                            key={index}\n                            onClick={() => answerButtonClicked(choice, index)}\n                            style={{\n                                backgroundColor: selectedButton != null ? correctIndex === index ? 'lightgreen' : (selectedButton === index && selectedButton !== correctIndex) ? 'red' : 'whitesmoke' : 'whitesmoke',\n                                cursor: selectedButton ? 'not-allowed' : 'pointer'\n                            }}\n                            disabled={selectedButton != null}\n                        >\n                            <Typography>{choice.english}</Typography>\n                        </ListItemButton>\n                    ))}\n                    {answerType === 'text' &&\n                    (<div id='text-answer-container'>\n                        <TextField disabled={!isFirstAttempt} label=\"Answer\" required value={textAnswer} onChange={e => setTextAnswer(e.target.value)} />\n                        <Button disabled={!isFirstAttempt} variant='contained' onClick={textSubmit}>Submit</Button>\n                        <Button disabled={!showOverrideText} variant='contained' onClick={overrideText}>override text</Button>\n                    </div>)\n                    }\n                </Box>\n                <Box id='button-container'>\n                    <Button\n                        id='audioGameButton'\n                        variant='contained'\n                        onClick={playButtonClicked}\n                    >\n                        Play\n                    </Button>\n                    <Button\n                        id='nextWordGameButton'\n                        variant='contained'\n                        onClick={getQandA}\n                    >\n                        Next word\n                    </Button>\n                </Box>\n                <Typography id='score' variant='h5'>Score: {score}</Typography>\n            </Box>\n        );\n    }\n}\n\nexport default Game;","/Users/benjaminweissman/Desktop/Coding_Projects/hebr-app/src/NavBar.js",[],[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":86,"column":8,"nodeType":"71","endLine":86,"endColumn":10,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":35,"column":11,"nodeType":"75","messageId":"76","endLine":35,"endColumn":28},{"ruleId":"69","severity":1,"message":"77","line":57,"column":9,"nodeType":"75","endLine":57,"endColumn":18,"suggestions":"78"},{"ruleId":"69","severity":1,"message":"79","line":69,"column":8,"nodeType":"71","endLine":69,"endColumn":10,"suggestions":"80"},{"ruleId":"69","severity":1,"message":"81","line":74,"column":8,"nodeType":"71","endLine":74,"endColumn":20,"suggestions":"82"},{"ruleId":"69","severity":1,"message":"83","line":86,"column":8,"nodeType":"71","endLine":86,"endColumn":19,"suggestions":"84"},{"ruleId":"73","severity":1,"message":"85","line":236,"column":11,"nodeType":"75","messageId":"76","endLine":236,"endColumn":25},"no-new-object",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'buildSentence'. Either include it or remove the dependency array.","ArrayExpression",["87"],"no-unused-vars","'useEffectDebugger' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'effectHook'. Either include it or remove the dependency array.",["88"],"React Hook useEffect has a missing dependency: 'chapterNumber'. Either include it or remove the dependency array.",["89"],"React Hook useEffect has a missing dependency: 'getQandA'. Either include it or remove the dependency array.",["90"],"React Hook useEffect has a missing dependency: 'playButtonClicked'. Either include it or remove the dependency array.",["91"],"'handleKeyPress' is assigned a value but never used.","no-object-constructor",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [buildSentence]",{"range":"102","text":"103"},"Update the dependencies array to be: [effectHook]",{"range":"104","text":"105"},"Update the dependencies array to be: [chapterNumber]",{"range":"106","text":"107"},"Update the dependencies array to be: [getQandA, vocabWords]",{"range":"108","text":"109"},"Update the dependencies array to be: [isNewWord, playButtonClicked]",{"range":"110","text":"111"},[3510,3512],"[buildSentence]",[2251,2263],"[effectHook]",[2515,2517],"[chapterNumber]",[2570,2582],"[getQandA, vocabWords]",[2863,2874],"[isNewWord, playButtonClicked]"]